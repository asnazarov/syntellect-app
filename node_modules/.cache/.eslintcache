[{"/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/index.tsx":"1","/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/reportWebVitals.ts":"2","/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/App.tsx":"3","/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/api/apiService.ts":"4","/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/app/models/index.tsx":"5","/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/app/providers/ButtonControls.tsx":"6","/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/app/controllers/ButtonControls.tsx":"7","/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/app/providers/index.tsx":"8","/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/app/providers/AutocompleteControl.tsx":"9","/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/app/controllers/AutocompleteControl.tsx":"10","/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/app/models/domian/CountriesModel.tsx":"11","/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/app/view-models/AutocompleteControl.ts":"12","/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/components/UI/Button/Button.tsx":"13","/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/components/UI/Input/Input.tsx":"14","/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/app/views/ButtonControls.tsx":"15","/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/app/views/AutocompleteControl/AutocompleteControl.tsx":"16"},{"size":712,"mtime":1674246058126,"results":"17","hashOfConfig":"18"},{"size":425,"mtime":1666785307706,"results":"19","hashOfConfig":"18"},{"size":308,"mtime":1674411146422,"results":"20","hashOfConfig":"18"},{"size":787,"mtime":1674310927718,"results":"21","hashOfConfig":"18"},{"size":228,"mtime":1674423734359,"results":"22","hashOfConfig":"18"},{"size":241,"mtime":1674423734384,"results":"23","hashOfConfig":"18"},{"size":1393,"mtime":1674423734403,"results":"24","hashOfConfig":"18"},{"size":133,"mtime":1674298835445,"results":"25","hashOfConfig":"18"},{"size":460,"mtime":1674423734396,"results":"26","hashOfConfig":"18"},{"size":2303,"mtime":1674423734348,"results":"27","hashOfConfig":"18"},{"size":705,"mtime":1674423734390,"results":"28","hashOfConfig":"18"},{"size":421,"mtime":1674423734407,"results":"29","hashOfConfig":"18"},{"size":564,"mtime":1674404813651,"results":"30","hashOfConfig":"18"},{"size":453,"mtime":1674423263714,"results":"31","hashOfConfig":"18"},{"size":1496,"mtime":1674423734413,"results":"32","hashOfConfig":"18"},{"size":1467,"mtime":1674423734376,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"rf9u4w",{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"37"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"37"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"37"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"37"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"37"},"/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/index.tsx",[],[],[],"/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/reportWebVitals.ts",[],[],"/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/App.tsx",[],[],"/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/api/apiService.ts",[],[],"/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/app/models/index.tsx",[],[],"/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/app/providers/ButtonControls.tsx",["89","90"],[],"import {Component} from \"react\";\nimport {inject} from \"mobx-react\";\nimport Controller from '../controllers/ButtonControls'\n\n// @inject(Models.type.USERS_MODEL)\nexport default class ButtonControls extends Component {\n  // private viewModel: ViewModel;\n\n  constructor(props: any) {\n    super(props);\n    // const userModel: UserModel = props[Models.type.USERS_MODEL];\n    // this.viewModel = new ViewModel(userModel);\n  }\n\n  render() {\n    return <Controller/>;\n  }\n}","/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/app/controllers/ButtonControls.tsx",["91"],[],"import Views from '../views/ButtonControls'\nimport React, {FC, useState} from \"react\";\nimport {ControllerProps, InputStateType} from \"../@types/ButtonControlsType\";\n\nconst ButtonControls:FC<ControllerProps> = () => {\n\n  const [inputValues, setInputValues] = useState<InputStateType>({\n    input_1: '',\n    input_2: ''\n  })\n\n  const onInputClear = (e: React.FormEvent<HTMLButtonElement>) => {\n    const id: string = e.currentTarget.id\n    setInputValues({...inputValues, [`input_${id}`]: ''})\n  }\n\n  const onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const id: string = e.currentTarget.id\n    const value: string = e.target.value\n    setInputValues({...inputValues, [`input_${id}`]: value})\n  }\n\n  const onInputDefaultText = (e: React.FormEvent<HTMLButtonElement>) => {\n    const id: string = e.currentTarget.id\n    setInputValues({...inputValues, [`input_${id}`]: 'Hello world!'})\n  }\n\n  const onAlertInput = (e: React.FormEvent<HTMLButtonElement>): void => {\n    const id: string = e.currentTarget.id\n    const value: string = inputValues[`input_${id}` as keyof InputStateType]\n    if (value != '') return alert(value)\n  }\n\n  return (\n    <Views\n      inputValues={inputValues}\n      onInputClear={onInputClear}\n      onInputChange={onInputChange}\n      onInputDefaultText={onInputDefaultText}\n      onAlertInput={onAlertInput}\n    />\n  )\n}\n\nexport default ButtonControls","/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/app/providers/index.tsx",[],[],"/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/app/providers/AutocompleteControl.tsx",["92","93","94"],[],"import {Component} from \"react\";\nimport {inject} from \"mobx-react\";\nimport Controller from '../controllers/AutocompleteControl'\nimport {autocompleteControlViewModel} from \"../view-models/AutocompleteControl\";\nimport CountriesModel from \"../models/domian/CountriesModel\";\nimport Models from '../models'\n\n\n\nconst AutocompleteControl = () => {\n\n  // autocompleteControlViewModel(CountriesModel)\n\n  return <Controller viewModel={autocompleteControlViewModel(CountriesModel)}/>;\n}\n\nexport default AutocompleteControl\n\n\n// @inject(Models.type.COUNTRIES_MODEL)\n// export default class AutocompleteControl extends Component {\n//   public viewModel: AutocompleteControlViewModel;\n//\n//\n//   constructor(props: any) {\n//     super(props);\n//     // const autocompleteControlModel: CountriesModel = props[Models.type.COUNTRIES_MODEL];\n//     this.viewModel = new AutocompleteControlViewModel(CountriesModel);\n//   }\n//\n//   render() {\n//\n//     // return <Controller viewModel={this.viewModel}/>;\n//     return <Controller viewModel={CountriesModel}/>;\n//   }\n// }","/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/app/controllers/AutocompleteControl.tsx",["95"],[],"/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/app/models/domian/CountriesModel.tsx",["96","97"],[],"import {computed, makeAutoObservable, observable} from 'mobx';\nimport {CountryInfo, getCountryByName} from \"../../../api/apiService\";\nimport {log} from \"util\";\n\n class CountriesModel {\n  @observable found_countries: CountryInfo[] = [];\n  // found_countries: CountryInfo[] = [];\n  // private asyncAddLoading = false;\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  // @computed changeLoadingState(value: boolean) {\n  //   this.asyncAddLoading = value;\n  // }\n\n  /**\n   * Setters\n   */\n  @computed addFoundCountries(countries: CountryInfo[]) {\n    this.found_countries = countries\n  }\n\n  @computed async getSearchCountriesAsync(value: string) {\n    // this.changeLoadingState(true);\n    const countries = await getCountryByName(value)\n    // this.foundCountries()\n    // await this.foundCountries()\n    await this.addFoundCountries(countries)\n    // this.changeLoadingState(false);\n  }\n\n  /**\n   * Getters\n   */\n\n  public foundCountries(): CountryInfo[] | undefined {\n    // console.log(this.found_countries)\n    if (this.found_countries.length != 0) {\n      return this.found_countries;\n    }\n  }\n\n  // public get users(): string[] {\n  //   return this.names;\n  // }\n\n  // public get asyncLoading(): boolean {\n  //   return this.asyncAddLoading;\n  // }\n}\nexport default new CountriesModel()","/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/app/view-models/AutocompleteControl.ts",["98","99"],[],"import CountriesModel from \"../models/domian/CountriesModel\";\nimport {CountryInfo} from \"../../api/apiService\";\nimport CountriesModals from '../models/domian/CountriesModel'\n\n\nexport const autocompleteControlViewModel = (model: typeof CountriesModel): typeof CountriesModel=> {\n\n  return {\n    found_countries: model.found_countries,\n    getSearchCountriesAsync: async (value: string) => {\n      await model.getSearchCountriesAsync(value);\n    },\n    addFoundCountries: () => {},\n    foundCountries: () => model.foundCountries()\n  }\n  // async function getSearchCountriesAsync(value: string) {\n  //   await model.getSearchCountriesAsync(value);\n  // }\n}\n\n\n// export default class AutocompleteControlViewModel {\n//   private countriesModel: CountriesModel;\n//\n//   constructor(countries: CountriesModel) {\n//     this.countriesModel = countries;\n//   }\n//\n//\n//   // state = {found_countries: this.countriesModel.found_countries}\n//\n//   public async getSearchCountriesAsync(value: string) {\n//     await this.countriesModel.getSearchCountriesAsync(value);\n//   }\n//\n//\n//   public get foundCountriesList(): CountryInfo[] | undefined {\n//     return this.countriesModel.foundCountries();\n//   }\n//\n//   // public get asyncLoading(): boolean {\n//   //   return this.countriesModel.asyncLoading;\n//   // }\n// }\n","/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/components/UI/Button/Button.tsx",[],[],"/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/components/UI/Input/Input.tsx",[],[],"/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/app/views/ButtonControls.tsx",[],[],"/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/app/views/AutocompleteControl/AutocompleteControl.tsx",["100","101"],[],"import {FC} from \"react\";\nimport styleApp from '../../../App.module.scss'\nimport styleInput from '../../../components/UI/Input/input.module.scss'\nimport style from './autocompleteControl.module.scss'\nimport {ViewPropsType} from \"../../@types/AutocompleteControl\";\nimport {observer} from \"mobx-react\";\nimport Input from \"../../../components/UI/Input/Input\";\n\nconst AutocompleteControl: FC<ViewPropsType> = observer((props) => {\n\n\n  return (\n    <div className={style.wrapper}>\n      {Object.keys(props.itemSelection).length\n        ? <div className={`${styleInput.input} ${style.text}`} onClick={() => props.onHandleItem(props.id || '')}>\n          <img src={props.itemSelection.flag} alt=\"flag\"/>\n          <p>{props.itemSelection.name}</p>\n          <p>{props.itemSelection.fullName}</p>\n        </div>\n        : <Input onChange={props.getSearchCountriesAsync}\n                 id={props.id}\n                 value={props.inputState.value}\n        />\n      }\n\n      {props.inputState.open &&\n        <ul className={style.list}>\n          {props.foundCountries?.slice(0, props.maxLengthSelect).map((el, ind) => {\n            return (\n              <li className={style.item} key={ind} onClick={() => props.onHandleSelection(el, props.id || '')}>\n                <img src={el.flag} alt=\"flag\"/>\n                <p>{el.name}</p>\n                <p>{el.fullName}</p>\n              </li>\n            )\n          })}\n        </ul>\n      }\n\n    </div>\n  )\n})\n\nexport default AutocompleteControl",{"ruleId":"102","severity":1,"message":"103","line":2,"column":9,"nodeType":"104","messageId":"105","endLine":2,"endColumn":15},{"ruleId":"106","severity":1,"message":"107","line":9,"column":3,"nodeType":"108","messageId":"109","endLine":13,"endColumn":4},{"ruleId":"110","severity":1,"message":"111","line":33,"column":15,"nodeType":"112","messageId":"113","endLine":33,"endColumn":17},{"ruleId":"102","severity":1,"message":"114","line":1,"column":9,"nodeType":"104","messageId":"105","endLine":1,"endColumn":18},{"ruleId":"102","severity":1,"message":"103","line":2,"column":9,"nodeType":"104","messageId":"105","endLine":2,"endColumn":15},{"ruleId":"102","severity":1,"message":"115","line":6,"column":8,"nodeType":"104","messageId":"105","endLine":6,"endColumn":14},{"ruleId":"102","severity":1,"message":"116","line":2,"column":22,"nodeType":"104","messageId":"105","endLine":2,"endColumn":38},{"ruleId":"102","severity":1,"message":"117","line":3,"column":9,"nodeType":"104","messageId":"105","endLine":3,"endColumn":12},{"ruleId":"110","severity":1,"message":"111","line":40,"column":37,"nodeType":"112","messageId":"113","endLine":40,"endColumn":39},{"ruleId":"102","severity":1,"message":"118","line":2,"column":9,"nodeType":"104","messageId":"105","endLine":2,"endColumn":20},{"ruleId":"102","severity":1,"message":"119","line":3,"column":8,"nodeType":"104","messageId":"105","endLine":3,"endColumn":23},{"ruleId":"102","severity":1,"message":"120","line":2,"column":8,"nodeType":"104","messageId":"105","endLine":2,"endColumn":16},{"ruleId":"110","severity":1,"message":"111","line":26,"column":21,"nodeType":"112","messageId":"113","endLine":26,"endColumn":23},"@typescript-eslint/no-unused-vars","'inject' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Component' is defined but never used.","'Models' is defined but never used.","'getCountryByName' is defined but never used.","'log' is defined but never used.","'CountryInfo' is defined but never used.","'CountriesModals' is defined but never used.","'styleApp' is defined but never used."]