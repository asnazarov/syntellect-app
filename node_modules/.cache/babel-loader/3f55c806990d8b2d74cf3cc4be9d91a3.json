{"ast":null,"code":"import _initializerDefineProperty from \"/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty.js\";\nimport _applyDecoratedDescriptor from \"/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js\";\nimport _initializerWarningHelper from \"/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper.js\";\nvar _class, _descriptor;\nimport { makeAutoObservable, observable } from 'mobx';\nimport { getCountryByName } from \"../../../api/apiService\";\n/**\n * The Model is acting as a data source ie. global store\n * for the application. It composes all data from the network\n * layer, databases, services and serve them in a easy way.\n * It shouldn’t have any other logic except one that actually\n * updates a model and doesn’t have any side effects.\n *\n * In cosntructor call `makeAutoObservable(this);`\n *\n * The variables that will contain data will have to be private.\n * To get the content of a variable use a getter (check line 63)\n */\nlet CountriesModel = (_class = class CountriesModel {\n  /**\n   * Private variables to store data\n   */\n\n  // found_countries: CountryInfo[] = [];\n\n  constructor() {\n    _initializerDefineProperty(this, \"found_countries\", _descriptor, this);\n    this.asyncAddLoading = false;\n    makeAutoObservable(this);\n  }\n  changeLoadingState(value) {\n    this.asyncAddLoading = value;\n  }\n\n  /**\n   * Setters\n   */\n  addFoundCountries(countries) {\n    console.log(countries);\n    this.found_countries = countries;\n  }\n  async getSearchCountriesAsync(value) {\n    this.changeLoadingState(true);\n    const countries = await getCountryByName(value);\n    // console.log(countries)\n    // this.foundCountries()\n    await this.addFoundCountries(countries);\n    this.changeLoadingState(false);\n  }\n  removeUser(name) {\n    // this.names = this.names.filter((userName) => userName !== name);\n  }\n  clearAll() {\n    // this.names = [];\n  }\n\n  /**\n   * Getters\n   */\n\n  foundCountries() {\n    // console.log(this.found_countries)\n    if (this.found_countries.length != 0) {\n      return this.found_countries;\n    }\n  }\n\n  // public get users(): string[] {\n  //   return this.names;\n  // }\n\n  get asyncLoading() {\n    return this.asyncAddLoading;\n  }\n}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"found_countries\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n})), _class);\nexport { CountriesModel as default };","map":{"version":3,"names":["makeAutoObservable","observable","getCountryByName","CountriesModel","constructor","asyncAddLoading","changeLoadingState","value","addFoundCountries","countries","console","log","found_countries","getSearchCountriesAsync","removeUser","name","clearAll","foundCountries","length","asyncLoading"],"sources":["/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/app/models/domian/CountriesModel.tsx"],"sourcesContent":["import {makeAutoObservable, observable} from 'mobx';\nimport {CountryInfo, getCountryByName} from \"../../../api/apiService\";\nimport {log} from \"util\";\n\n/**\n * The Model is acting as a data source ie. global store\n * for the application. It composes all data from the network\n * layer, databases, services and serve them in a easy way.\n * It shouldn’t have any other logic except one that actually\n * updates a model and doesn’t have any side effects.\n *\n * In cosntructor call `makeAutoObservable(this);`\n *\n * The variables that will contain data will have to be private.\n * To get the content of a variable use a getter (check line 63)\n */\nexport default class CountriesModel {\n  /**\n   * Private variables to store data\n   */\n  @observable found_countries: CountryInfo[] = [];\n  // found_countries: CountryInfo[] = [];\n  private asyncAddLoading = false;\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  private changeLoadingState(value: boolean) {\n    this.asyncAddLoading = value;\n  }\n\n  /**\n   * Setters\n   */\n  public addFoundCountries(countries: CountryInfo[]) {\n    console.log(countries)\n    this.found_countries = countries\n  }\n\n  public async getSearchCountriesAsync(value: string) {\n    this.changeLoadingState(true);\n    const countries = await getCountryByName(value)\n    // console.log(countries)\n    // this.foundCountries()\n    await this.addFoundCountries(countries)\n    this.changeLoadingState(false);\n  }\n\n  public removeUser(name: string) {\n    // this.names = this.names.filter((userName) => userName !== name);\n  }\n\n  public clearAll() {\n    // this.names = [];\n  }\n\n  /**\n   * Getters\n   */\n\n\n  public foundCountries(): CountryInfo[] | undefined {\n    // console.log(this.found_countries)\n    if (this.found_countries.length != 0) {\n      return this.found_countries;\n    }\n  }\n\n  // public get users(): string[] {\n  //   return this.names;\n  // }\n\n  public get asyncLoading(): boolean {\n    return this.asyncAddLoading;\n  }\n}\n"],"mappings":";;;;AAAA,SAAQA,kBAAkB,EAAEC,UAAU,QAAO,MAAM;AACnD,SAAqBC,gBAAgB,QAAO,yBAAyB;AAGrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA,IAYqBC,cAAc,aAApB,MAAMA,cAAc,CAAC;EAClC;AACF;AACA;;EAEE;;EAGAC,WAAW,GAAG;IAAA;IAAA,KAFNC,eAAe,GAAG,KAAK;IAG7BL,kBAAkB,CAAC,IAAI,CAAC;EAC1B;EAEQM,kBAAkB,CAACC,KAAc,EAAE;IACzC,IAAI,CAACF,eAAe,GAAGE,KAAK;EAC9B;;EAEA;AACF;AACA;EACSC,iBAAiB,CAACC,SAAwB,EAAE;IACjDC,OAAO,CAACC,GAAG,CAACF,SAAS,CAAC;IACtB,IAAI,CAACG,eAAe,GAAGH,SAAS;EAClC;EAEA,MAAaI,uBAAuB,CAACN,KAAa,EAAE;IAClD,IAAI,CAACD,kBAAkB,CAAC,IAAI,CAAC;IAC7B,MAAMG,SAAS,GAAG,MAAMP,gBAAgB,CAACK,KAAK,CAAC;IAC/C;IACA;IACA,MAAM,IAAI,CAACC,iBAAiB,CAACC,SAAS,CAAC;IACvC,IAAI,CAACH,kBAAkB,CAAC,KAAK,CAAC;EAChC;EAEOQ,UAAU,CAACC,IAAY,EAAE;IAC9B;EACF;EAEOC,QAAQ,GAAG;IAChB;EACF;;EAEA;AACF;AACA;;EAGSC,cAAc,GAA8B;IACjD;IACA,IAAI,IAAI,CAACL,eAAe,CAACM,MAAM,IAAI,CAAC,EAAE;MACpC,OAAO,IAAI,CAACN,eAAe;IAC7B;EACF;;EAEA;EACA;EACA;;EAEA,IAAWO,YAAY,GAAY;IACjC,OAAO,IAAI,CAACd,eAAe;EAC7B;AACF,CAAC,iFAxDEJ,UAAU;EAAA;EAAA;EAAA;EAAA;IAAA,OAAkC,EAAE;EAAA;AAAA;AAAA,SAJ5BE,cAAc"},"metadata":{},"sourceType":"module"}