{"ast":null,"code":"import { makeAutoObservable } from 'mobx';\nimport { getCountryByName } from \"../../../api/apiService\";\n/**\n * The Model is acting as a data source ie. global store\n * for the application. It composes all data from the network\n * layer, databases, services and serve them in a easy way.\n * It shouldn’t have any other logic except one that actually\n * updates a model and doesn’t have any side effects.\n *\n * In cosntructor call `makeAutoObservable(this);`\n *\n * The variables that will contain data will have to be private.\n * To get the content of a variable use a getter (check line 63)\n */\nexport default class CountriesModel {\n  /**\n   * Private variables to store data\n   */\n\n  constructor() {\n    this.found_countries = [];\n    this.asyncAddLoading = false;\n    makeAutoObservable(this);\n  }\n  changeLoadingState(value) {\n    this.asyncAddLoading = value;\n  }\n\n  /**\n   * Setters\n   */\n  addFoundCountries(countries) {\n    this.found_countries = countries;\n  }\n  async getSearchCountriesAsync(value) {\n    this.changeLoadingState(true);\n    const countries = await getCountryByName(value);\n    // console.log(countries)\n    this.foundCountries();\n    await this.addFoundCountries(countries);\n    this.changeLoadingState(false);\n  }\n  removeUser(name) {\n    // this.names = this.names.filter((userName) => userName !== name);\n  }\n  clearAll() {\n    // this.names = [];\n  }\n\n  /**\n   * Getters\n   */\n\n  foundCountries() {\n    // console.log(this.found_countries)\n    if (this.found_countries.length != 0) {\n      return this.found_countries;\n    }\n  }\n\n  // public get users(): string[] {\n  //   return this.names;\n  // }\n\n  get asyncLoading() {\n    return this.asyncAddLoading;\n  }\n}","map":{"version":3,"names":["makeAutoObservable","getCountryByName","CountriesModel","constructor","found_countries","asyncAddLoading","changeLoadingState","value","addFoundCountries","countries","getSearchCountriesAsync","foundCountries","removeUser","name","clearAll","length","asyncLoading"],"sources":["/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/app/models/domian/CountriesModel.tsx"],"sourcesContent":["import {makeAutoObservable} from 'mobx';\nimport {CountryInfo, getCountryByName} from \"../../../api/apiService\";\nimport {log} from \"util\";\n\n/**\n * The Model is acting as a data source ie. global store\n * for the application. It composes all data from the network\n * layer, databases, services and serve them in a easy way.\n * It shouldn’t have any other logic except one that actually\n * updates a model and doesn’t have any side effects.\n *\n * In cosntructor call `makeAutoObservable(this);`\n *\n * The variables that will contain data will have to be private.\n * To get the content of a variable use a getter (check line 63)\n */\nexport default class CountriesModel {\n  /**\n   * Private variables to store data\n   */\n  private found_countries: CountryInfo[] = [];\n  private asyncAddLoading = false;\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  private changeLoadingState(value: boolean) {\n    this.asyncAddLoading = value;\n  }\n\n  /**\n   * Setters\n   */\n  public addFoundCountries(countries: CountryInfo[]) {\n    this.found_countries = countries\n  }\n\n  public async getSearchCountriesAsync(value: string) {\n    this.changeLoadingState(true);\n    const countries = await getCountryByName(value)\n    // console.log(countries)\n    this.foundCountries()\n    await this.addFoundCountries(countries)\n    this.changeLoadingState(false);\n  }\n\n  public removeUser(name: string) {\n    // this.names = this.names.filter((userName) => userName !== name);\n  }\n\n  public clearAll() {\n    // this.names = [];\n  }\n\n  /**\n   * Getters\n   */\n\n\n  public foundCountries(): CountryInfo[] | [] {\n    // console.log(this.found_countries)\n    if (this.found_countries.length != 0) {\n      return this.found_countries;\n    }\n  }\n\n  // public get users(): string[] {\n  //   return this.names;\n  // }\n\n  public get asyncLoading(): boolean {\n    return this.asyncAddLoading;\n  }\n}\n"],"mappings":"AAAA,SAAQA,kBAAkB,QAAO,MAAM;AACvC,SAAqBC,gBAAgB,QAAO,yBAAyB;AAGrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,cAAc,CAAC;EAClC;AACF;AACA;;EAIEC,WAAW,GAAG;IAAA,KAHNC,eAAe,GAAkB,EAAE;IAAA,KACnCC,eAAe,GAAG,KAAK;IAG7BL,kBAAkB,CAAC,IAAI,CAAC;EAC1B;EAEQM,kBAAkB,CAACC,KAAc,EAAE;IACzC,IAAI,CAACF,eAAe,GAAGE,KAAK;EAC9B;;EAEA;AACF;AACA;EACSC,iBAAiB,CAACC,SAAwB,EAAE;IACjD,IAAI,CAACL,eAAe,GAAGK,SAAS;EAClC;EAEA,MAAaC,uBAAuB,CAACH,KAAa,EAAE;IAClD,IAAI,CAACD,kBAAkB,CAAC,IAAI,CAAC;IAC7B,MAAMG,SAAS,GAAG,MAAMR,gBAAgB,CAACM,KAAK,CAAC;IAC/C;IACA,IAAI,CAACI,cAAc,EAAE;IACrB,MAAM,IAAI,CAACH,iBAAiB,CAACC,SAAS,CAAC;IACvC,IAAI,CAACH,kBAAkB,CAAC,KAAK,CAAC;EAChC;EAEOM,UAAU,CAACC,IAAY,EAAE;IAC9B;EACF;EAEOC,QAAQ,GAAG;IAChB;EACF;;EAEA;AACF;AACA;;EAGSH,cAAc,GAAuB;IAC1C;IACA,IAAI,IAAI,CAACP,eAAe,CAACW,MAAM,IAAI,CAAC,EAAE;MACpC,OAAO,IAAI,CAACX,eAAe;IAC7B;EACF;;EAEA;EACA;EACA;;EAEA,IAAWY,YAAY,GAAY;IACjC,OAAO,IAAI,CAACX,eAAe;EAC7B;AACF"},"metadata":{},"sourceType":"module"}