{"ast":null,"code":"var _jsxFileName = \"/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/app/controllers/AutocompleteControl.tsx\",\n  _s = $RefreshSig$();\nimport View from '../views/AutocompleteControl';\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AutocompleteControl = props => {\n  _s();\n  const [value, setValue] = useState('');\n  const [itemSelection, setItemSelection] = useState({});\n  const [foundCountries, setFoundCountries] = useState([]);\n  const getSearchCountriesAsync = async e => {\n    setValue(e.target.value);\n    await props.viewModel.getSearchCountriesAsync(e.target.value);\n    const result = props.viewModel.foundCountries();\n    setFoundCountries(result);\n  };\n  const onHandleSelection = item => setItemSelection(item);\n  return /*#__PURE__*/_jsxDEV(View, {\n    value: value,\n    itemSelection: itemSelection,\n    foundCountries: foundCountries,\n    maxLengthSelect: 3,\n    getSearchCountriesAsync: getSearchCountriesAsync\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(AutocompleteControl, \"TGq4qiCdTkADLE5SlG7L7jgjm0g=\");\n_c = AutocompleteControl;\nexport default AutocompleteControl;\nvar _c;\n$RefreshReg$(_c, \"AutocompleteControl\");","map":{"version":3,"names":["View","React","useState","AutocompleteControl","props","value","setValue","itemSelection","setItemSelection","foundCountries","setFoundCountries","getSearchCountriesAsync","e","target","viewModel","result","onHandleSelection","item"],"sources":["/Users/aleksandrnazarov/WebstormProjects/syntellect-app/syntellect-app/src/app/controllers/AutocompleteControl.tsx"],"sourcesContent":["import View from '../views/AutocompleteControl'\nimport {CountryInfo, getCountryByName} from \"../../api/apiService\";\nimport React, {FC, useState} from \"react\";\nimport {ControllerProps} from \"../@types/AutocompleteControl\";\nimport {observer} from \"mobx-react\";\nimport {autocompleteControlViewModel} from \"../view-models/AutocompleteControl\";\nimport {set} from \"mobx\";\n\n\nconst AutocompleteControl: FC<ControllerProps> = (props) => {\n\n  const [value, setValue] = useState<string>('')\n  const [itemSelection, setItemSelection] = useState<CountryInfo>({} as CountryInfo)\n  const [foundCountries, setFoundCountries] = useState<CountryInfo[] | undefined>([])\n\n  const getSearchCountriesAsync = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(e.target.value)\n    await props.viewModel.getSearchCountriesAsync(e.target.value)\n    const result = props.viewModel.foundCountries()\n    setFoundCountries(result)\n  }\n\n  const onHandleSelection = (item: CountryInfo) =>\n    setItemSelection(item)\n\n  return (\n    <View\n      value={value}\n      itemSelection={itemSelection}\n      foundCountries={foundCountries}\n      maxLengthSelect={3}\n      getSearchCountriesAsync={getSearchCountriesAsync}\n    />\n  )\n}\n\nexport default AutocompleteControl"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,8BAA8B;AAE/C,OAAOC,KAAK,IAAOC,QAAQ,QAAO,OAAO;AAAC;AAO1C,MAAMC,mBAAwC,GAAIC,KAAK,IAAK;EAAA;EAE1D,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGJ,QAAQ,CAAS,EAAE,CAAC;EAC9C,MAAM,CAACK,aAAa,EAAEC,gBAAgB,CAAC,GAAGN,QAAQ,CAAc,CAAC,CAAC,CAAgB;EAClF,MAAM,CAACO,cAAc,EAAEC,iBAAiB,CAAC,GAAGR,QAAQ,CAA4B,EAAE,CAAC;EAEnF,MAAMS,uBAAuB,GAAG,MAAOC,CAAsC,IAAK;IAChFN,QAAQ,CAACM,CAAC,CAACC,MAAM,CAACR,KAAK,CAAC;IACxB,MAAMD,KAAK,CAACU,SAAS,CAACH,uBAAuB,CAACC,CAAC,CAACC,MAAM,CAACR,KAAK,CAAC;IAC7D,MAAMU,MAAM,GAAGX,KAAK,CAACU,SAAS,CAACL,cAAc,EAAE;IAC/CC,iBAAiB,CAACK,MAAM,CAAC;EAC3B,CAAC;EAED,MAAMC,iBAAiB,GAAIC,IAAiB,IAC1CT,gBAAgB,CAACS,IAAI,CAAC;EAExB,oBACE,QAAC,IAAI;IACH,KAAK,EAAEZ,KAAM;IACb,aAAa,EAAEE,aAAc;IAC7B,cAAc,EAAEE,cAAe;IAC/B,eAAe,EAAE,CAAE;IACnB,uBAAuB,EAAEE;EAAwB;IAAA;IAAA;IAAA;EAAA,QACjD;AAEN,CAAC;AAAA,GAzBKR,mBAAwC;AAAA,KAAxCA,mBAAwC;AA2B9C,eAAeA,mBAAmB;AAAA;AAAA"},"metadata":{},"sourceType":"module"}